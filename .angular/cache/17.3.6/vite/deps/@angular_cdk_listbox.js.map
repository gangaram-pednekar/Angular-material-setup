{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/cdk/fesm2022/listbox.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { inject, ElementRef, booleanAttribute, Directive, Input, NgZone, ChangeDetectorRef, forwardRef, Output, ContentChildren, NgModule } from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { A, hasModifierKey, SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Subject, defer, merge, fromEvent } from 'rxjs';\nimport { startWith, switchMap, map, takeUntil, filter } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Platform } from '@angular/cdk/platform';\n\n/** The next id to use for creating unique DOM IDs. */\nlet nextId = 0;\n/**\n * An implementation of SelectionModel that internally always represents the selection as a\n * multi-selection. This is necessary so that we can recover the full selection if the user\n * switches the listbox from single-selection to multi-selection after initialization.\n *\n * This selection model may report multiple selected values, even if it is in single-selection\n * mode. It is up to the user (CdkListbox) to check for invalid selections.\n */\nclass ListboxSelectionModel extends SelectionModel {\n  constructor(multiple = false, initiallySelectedValues, emitChanges = true, compareWith) {\n    super(true, initiallySelectedValues, emitChanges, compareWith);\n    this.multiple = multiple;\n  }\n  isMultipleSelection() {\n    return this.multiple;\n  }\n  select(...values) {\n    // The super class is always in multi-selection mode, so we need to override the behavior if\n    // this selection model actually belongs to a single-selection listbox.\n    if (this.multiple) {\n      return super.select(...values);\n    } else {\n      return super.setSelection(...values);\n    }\n  }\n}\n/** A selectable option in a listbox. */\nclass CdkOption {\n  constructor() {\n    this._generatedId = `cdk-option-${nextId++}`;\n    this._disabled = false;\n    /** The option's host element */\n    this.element = inject(ElementRef).nativeElement;\n    /** The parent listbox this option belongs to. */\n    this.listbox = inject(CdkListbox);\n    /** Emits when the option is destroyed. */\n    this.destroyed = new Subject();\n    /** Emits when the option is clicked. */\n    this._clicked = new Subject();\n  }\n  /** The id of the option's host element. */\n  get id() {\n    return this._id || this._generatedId;\n  }\n  set id(value) {\n    this._id = value;\n  }\n  /** Whether this option is disabled. */\n  get disabled() {\n    return this.listbox.disabled || this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n  }\n  /** The tabindex of the option when it is enabled. */\n  get enabledTabIndex() {\n    return this._enabledTabIndex === undefined ? this.listbox.enabledTabIndex : this._enabledTabIndex;\n  }\n  set enabledTabIndex(value) {\n    this._enabledTabIndex = value;\n  }\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n  /** Whether this option is selected. */\n  isSelected() {\n    return this.listbox.isSelected(this);\n  }\n  /** Whether this option is active. */\n  isActive() {\n    return this.listbox.isActive(this);\n  }\n  /** Toggle the selected state of this option. */\n  toggle() {\n    this.listbox.toggle(this);\n  }\n  /** Select this option if it is not selected. */\n  select() {\n    this.listbox.select(this);\n  }\n  /** Deselect this option if it is selected. */\n  deselect() {\n    this.listbox.deselect(this);\n  }\n  /** Focus this option. */\n  focus() {\n    this.element.focus();\n  }\n  /** Get the label for this element which is required by the FocusableOption interface. */\n  getLabel() {\n    return (this.typeaheadLabel ?? this.element.textContent?.trim()) || '';\n  }\n  /**\n   * No-op implemented as a part of `Highlightable`.\n   * @docs-private\n   */\n  setActiveStyles() {}\n  /**\n   * No-op implemented as a part of `Highlightable`.\n   * @docs-private\n   */\n  setInactiveStyles() {}\n  /** Handle focus events on the option. */\n  _handleFocus() {\n    // Options can wind up getting focused in active descendant mode if the user clicks on them.\n    // In this case, we push focus back to the parent listbox to prevent an extra tab stop when\n    // the user performs a shift+tab.\n    if (this.listbox.useActiveDescendant) {\n      this.listbox._setActiveOption(this);\n      this.listbox.focus();\n    }\n  }\n  /** Get the tabindex for this option. */\n  _getTabIndex() {\n    if (this.listbox.useActiveDescendant || this.disabled) {\n      return -1;\n    }\n    return this.isActive() ? this.enabledTabIndex : -1;\n  }\n  static {\n    this.ɵfac = function CdkOption_Factory(t) {\n      return new (t || CdkOption)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkOption,\n      selectors: [[\"\", \"cdkOption\", \"\"]],\n      hostAttrs: [\"role\", \"option\", 1, \"cdk-option\"],\n      hostVars: 6,\n      hostBindings: function CdkOption_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function CdkOption_click_HostBindingHandler($event) {\n            return ctx._clicked.next($event);\n          })(\"focus\", function CdkOption_focus_HostBindingHandler() {\n            return ctx._handleFocus();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n          i0.ɵɵattribute(\"aria-selected\", ctx.isSelected())(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled);\n          i0.ɵɵclassProp(\"cdk-option-active\", ctx.isActive());\n        }\n      },\n      inputs: {\n        id: \"id\",\n        value: [i0.ɵɵInputFlags.None, \"cdkOption\", \"value\"],\n        typeaheadLabel: [i0.ɵɵInputFlags.None, \"cdkOptionTypeaheadLabel\", \"typeaheadLabel\"],\n        disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkOptionDisabled\", \"disabled\", booleanAttribute],\n        enabledTabIndex: [i0.ɵɵInputFlags.None, \"tabindex\", \"enabledTabIndex\"]\n      },\n      exportAs: [\"cdkOption\"],\n      standalone: true,\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkOption, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkOption]',\n      standalone: true,\n      exportAs: 'cdkOption',\n      host: {\n        'role': 'option',\n        'class': 'cdk-option',\n        '[id]': 'id',\n        '[attr.aria-selected]': 'isSelected()',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.cdk-option-active]': 'isActive()',\n        '(click)': '_clicked.next($event)',\n        '(focus)': '_handleFocus()'\n      }\n    }]\n  }], null, {\n    id: [{\n      type: Input\n    }],\n    value: [{\n      type: Input,\n      args: ['cdkOption']\n    }],\n    typeaheadLabel: [{\n      type: Input,\n      args: ['cdkOptionTypeaheadLabel']\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        alias: 'cdkOptionDisabled',\n        transform: booleanAttribute\n      }]\n    }],\n    enabledTabIndex: [{\n      type: Input,\n      args: ['tabindex']\n    }]\n  });\n})();\nclass CdkListbox {\n  /** The id of the option's host element. */\n  get id() {\n    return this._id || this._generatedId;\n  }\n  set id(value) {\n    this._id = value;\n  }\n  /** The tabindex to use when the listbox is enabled. */\n  get enabledTabIndex() {\n    return this._enabledTabIndex === undefined ? 0 : this._enabledTabIndex;\n  }\n  set enabledTabIndex(value) {\n    this._enabledTabIndex = value;\n  }\n  /** The value selected in the listbox, represented as an array of option values. */\n  get value() {\n    return this._invalid ? [] : this.selectionModel.selected;\n  }\n  set value(value) {\n    this._setSelection(value);\n  }\n  /**\n   * Whether the listbox allows multiple options to be selected. If the value switches from `true`\n   * to `false`, and more than one option is selected, all options are deselected.\n   */\n  get multiple() {\n    return this.selectionModel.multiple;\n  }\n  set multiple(value) {\n    this.selectionModel.multiple = value;\n    if (this.options) {\n      this._updateInternalValue();\n    }\n  }\n  /** The orientation of the listbox. Only affects keyboard interaction, not visual layout. */\n  get orientation() {\n    return this._orientation;\n  }\n  set orientation(value) {\n    this._orientation = value === 'horizontal' ? 'horizontal' : 'vertical';\n    if (value === 'horizontal') {\n      this.listKeyManager?.withHorizontalOrientation(this._dir?.value || 'ltr');\n    } else {\n      this.listKeyManager?.withVerticalOrientation();\n    }\n  }\n  /** The function used to compare option values. */\n  get compareWith() {\n    return this.selectionModel.compareWith;\n  }\n  set compareWith(fn) {\n    this.selectionModel.compareWith = fn;\n  }\n  /**\n   * Whether the keyboard navigation should wrap when the user presses arrow down on the last item\n   * or arrow up on the first item.\n   */\n  get navigationWrapDisabled() {\n    return this._navigationWrapDisabled;\n  }\n  set navigationWrapDisabled(wrap) {\n    this._navigationWrapDisabled = wrap;\n    this.listKeyManager?.withWrap(!this._navigationWrapDisabled);\n  }\n  /** Whether keyboard navigation should skip over disabled items. */\n  get navigateDisabledOptions() {\n    return this._navigateDisabledOptions;\n  }\n  set navigateDisabledOptions(skip) {\n    this._navigateDisabledOptions = skip;\n    this.listKeyManager?.skipPredicate(this._navigateDisabledOptions ? this._skipNonePredicate : this._skipDisabledPredicate);\n  }\n  constructor() {\n    this._generatedId = `cdk-listbox-${nextId++}`;\n    /** Whether the listbox is disabled. */\n    this.disabled = false;\n    /** Whether the listbox will use active descendant or will move focus onto the options. */\n    this.useActiveDescendant = false;\n    this._orientation = 'vertical';\n    this._navigationWrapDisabled = false;\n    this._navigateDisabledOptions = false;\n    /** Emits when the selected value(s) in the listbox change. */\n    this.valueChange = new Subject();\n    /** The selection model used by the listbox. */\n    this.selectionModel = new ListboxSelectionModel();\n    /** Emits when the listbox is destroyed. */\n    this.destroyed = new Subject();\n    /** The host element of the listbox. */\n    this.element = inject(ElementRef).nativeElement;\n    /** The Angular zone. */\n    this.ngZone = inject(NgZone);\n    /** The change detector for this listbox. */\n    this.changeDetectorRef = inject(ChangeDetectorRef);\n    /** Whether the currently selected value in the selection model is invalid. */\n    this._invalid = false;\n    /** The last user-triggered option. */\n    this._lastTriggered = null;\n    /** Callback called when the listbox has been touched */\n    this._onTouched = () => {};\n    /** Callback called when the listbox value changes */\n    this._onChange = () => {};\n    /** Emits when an option has been clicked. */\n    this._optionClicked = defer(() => this.options.changes.pipe(startWith(this.options), switchMap(options => merge(...options.map(option => option._clicked.pipe(map(event => ({\n      option,\n      event\n    }))))))));\n    /** The directionality of the page. */\n    this._dir = inject(Directionality, {\n      optional: true\n    });\n    /** Whether the component is being rendered in the browser. */\n    this._isBrowser = inject(Platform).isBrowser;\n    /** A predicate that skips disabled options. */\n    this._skipDisabledPredicate = option => option.disabled;\n    /** A predicate that does not skip any options. */\n    this._skipNonePredicate = () => false;\n    /** Whether the listbox currently has focus. */\n    this._hasFocus = false;\n    /** A reference to the option that was active before the listbox lost focus. */\n    this._previousActiveOption = null;\n    if (this._isBrowser) {\n      this._setPreviousActiveOptionAsActiveOptionOnWindowBlur();\n    }\n  }\n  ngAfterContentInit() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      this._verifyNoOptionValueCollisions();\n      this._verifyOptionValues();\n    }\n    this._initKeyManager();\n    // Update the internal value whenever the options or the model value changes.\n    merge(this.selectionModel.changed, this.options.changes).pipe(startWith(null), takeUntil(this.destroyed)).subscribe(() => this._updateInternalValue());\n    this._optionClicked.pipe(filter(({\n      option\n    }) => !option.disabled), takeUntil(this.destroyed)).subscribe(({\n      option,\n      event\n    }) => this._handleOptionClicked(option, event));\n  }\n  ngOnDestroy() {\n    this.listKeyManager?.destroy();\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n  /**\n   * Toggle the selected state of the given option.\n   * @param option The option to toggle\n   */\n  toggle(option) {\n    this.toggleValue(option.value);\n  }\n  /**\n   * Toggle the selected state of the given value.\n   * @param value The value to toggle\n   */\n  toggleValue(value) {\n    if (this._invalid) {\n      this.selectionModel.clear(false);\n    }\n    this.selectionModel.toggle(value);\n  }\n  /**\n   * Select the given option.\n   * @param option The option to select\n   */\n  select(option) {\n    this.selectValue(option.value);\n  }\n  /**\n   * Select the given value.\n   * @param value The value to select\n   */\n  selectValue(value) {\n    if (this._invalid) {\n      this.selectionModel.clear(false);\n    }\n    this.selectionModel.select(value);\n  }\n  /**\n   * Deselect the given option.\n   * @param option The option to deselect\n   */\n  deselect(option) {\n    this.deselectValue(option.value);\n  }\n  /**\n   * Deselect the given value.\n   * @param value The value to deselect\n   */\n  deselectValue(value) {\n    if (this._invalid) {\n      this.selectionModel.clear(false);\n    }\n    this.selectionModel.deselect(value);\n  }\n  /**\n   * Set the selected state of all options.\n   * @param isSelected The new selected state to set\n   */\n  setAllSelected(isSelected) {\n    if (!isSelected) {\n      this.selectionModel.clear();\n    } else {\n      if (this._invalid) {\n        this.selectionModel.clear(false);\n      }\n      this.selectionModel.select(...this.options.map(option => option.value));\n    }\n  }\n  /**\n   * Get whether the given option is selected.\n   * @param option The option to get the selected state of\n   */\n  isSelected(option) {\n    return this.isValueSelected(option.value);\n  }\n  /**\n   * Get whether the given option is active.\n   * @param option The option to get the active state of\n   */\n  isActive(option) {\n    return !!(this.listKeyManager?.activeItem === option);\n  }\n  /**\n   * Get whether the given value is selected.\n   * @param value The value to get the selected state of\n   */\n  isValueSelected(value) {\n    if (this._invalid) {\n      return false;\n    }\n    return this.selectionModel.isSelected(value);\n  }\n  /**\n   * Registers a callback to be invoked when the listbox's value changes from user input.\n   * @param fn The callback to register\n   * @docs-private\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Registers a callback to be invoked when the listbox is blurred by the user.\n   * @param fn The callback to register\n   * @docs-private\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Sets the listbox's value.\n   * @param value The new value of the listbox\n   * @docs-private\n   */\n  writeValue(value) {\n    this._setSelection(value);\n    this._verifyOptionValues();\n  }\n  /**\n   * Sets the disabled state of the listbox.\n   * @param isDisabled The new disabled state\n   * @docs-private\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /** Focus the listbox's host element. */\n  focus() {\n    this.element.focus();\n  }\n  /**\n   * Triggers the given option in response to user interaction.\n   * - In single selection mode: selects the option and deselects any other selected option.\n   * - In multi selection mode: toggles the selected state of the option.\n   * @param option The option to trigger\n   */\n  triggerOption(option) {\n    if (option && !option.disabled) {\n      this._lastTriggered = option;\n      const changed = this.multiple ? this.selectionModel.toggle(option.value) : this.selectionModel.select(option.value);\n      if (changed) {\n        this._onChange(this.value);\n        this.valueChange.next({\n          value: this.value,\n          listbox: this,\n          option: option\n        });\n      }\n    }\n  }\n  /**\n   * Trigger the given range of options in response to user interaction.\n   * Should only be called in multi-selection mode.\n   * @param trigger The option that was triggered\n   * @param from The start index of the options to toggle\n   * @param to The end index of the options to toggle\n   * @param on Whether to toggle the option range on\n   */\n  triggerRange(trigger, from, to, on) {\n    if (this.disabled || trigger && trigger.disabled) {\n      return;\n    }\n    this._lastTriggered = trigger;\n    const isEqual = this.compareWith ?? Object.is;\n    const updateValues = [...this.options].slice(Math.max(0, Math.min(from, to)), Math.min(this.options.length, Math.max(from, to) + 1)).filter(option => !option.disabled).map(option => option.value);\n    const selected = [...this.value];\n    for (const updateValue of updateValues) {\n      const selectedIndex = selected.findIndex(selectedValue => isEqual(selectedValue, updateValue));\n      if (on && selectedIndex === -1) {\n        selected.push(updateValue);\n      } else if (!on && selectedIndex !== -1) {\n        selected.splice(selectedIndex, 1);\n      }\n    }\n    let changed = this.selectionModel.setSelection(...selected);\n    if (changed) {\n      this._onChange(this.value);\n      this.valueChange.next({\n        value: this.value,\n        listbox: this,\n        option: trigger\n      });\n    }\n  }\n  /**\n   * Sets the given option as active.\n   * @param option The option to make active\n   */\n  _setActiveOption(option) {\n    this.listKeyManager.setActiveItem(option);\n  }\n  /** Called when the listbox receives focus. */\n  _handleFocus() {\n    if (!this.useActiveDescendant) {\n      if (this.selectionModel.selected.length > 0) {\n        this._setNextFocusToSelectedOption();\n      } else {\n        this.listKeyManager.setNextItemActive();\n      }\n      this._focusActiveOption();\n    }\n  }\n  /** Called when the user presses keydown on the listbox. */\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n    const {\n      keyCode\n    } = event;\n    const previousActiveIndex = this.listKeyManager.activeItemIndex;\n    const ctrlKeys = ['ctrlKey', 'metaKey'];\n    if (this.multiple && keyCode === A && hasModifierKey(event, ...ctrlKeys)) {\n      // Toggle all options off if they're all selected, otherwise toggle them all on.\n      this.triggerRange(null, 0, this.options.length - 1, this.options.length !== this.value.length);\n      event.preventDefault();\n      return;\n    }\n    if (this.multiple && (keyCode === SPACE || keyCode === ENTER) && hasModifierKey(event, 'shiftKey')) {\n      if (this.listKeyManager.activeItem && this.listKeyManager.activeItemIndex != null) {\n        this.triggerRange(this.listKeyManager.activeItem, this._getLastTriggeredIndex() ?? this.listKeyManager.activeItemIndex, this.listKeyManager.activeItemIndex, !this.listKeyManager.activeItem.isSelected());\n      }\n      event.preventDefault();\n      return;\n    }\n    if (this.multiple && keyCode === HOME && hasModifierKey(event, ...ctrlKeys) && hasModifierKey(event, 'shiftKey')) {\n      const trigger = this.listKeyManager.activeItem;\n      if (trigger) {\n        const from = this.listKeyManager.activeItemIndex;\n        this.listKeyManager.setFirstItemActive();\n        this.triggerRange(trigger, from, this.listKeyManager.activeItemIndex, !trigger.isSelected());\n      }\n      event.preventDefault();\n      return;\n    }\n    if (this.multiple && keyCode === END && hasModifierKey(event, ...ctrlKeys) && hasModifierKey(event, 'shiftKey')) {\n      const trigger = this.listKeyManager.activeItem;\n      if (trigger) {\n        const from = this.listKeyManager.activeItemIndex;\n        this.listKeyManager.setLastItemActive();\n        this.triggerRange(trigger, from, this.listKeyManager.activeItemIndex, !trigger.isSelected());\n      }\n      event.preventDefault();\n      return;\n    }\n    if (keyCode === SPACE || keyCode === ENTER) {\n      this.triggerOption(this.listKeyManager.activeItem);\n      event.preventDefault();\n      return;\n    }\n    const isNavKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW || keyCode === HOME || keyCode === END;\n    this.listKeyManager.onKeydown(event);\n    // Will select an option if shift was pressed while navigating to the option\n    if (isNavKey && event.shiftKey && previousActiveIndex !== this.listKeyManager.activeItemIndex) {\n      this.triggerOption(this.listKeyManager.activeItem);\n    }\n  }\n  /** Called when a focus moves into the listbox. */\n  _handleFocusIn() {\n    // Note that we use a `focusin` handler for this instead of the existing `focus` handler,\n    // because focus won't land on the listbox if `useActiveDescendant` is enabled.\n    this._hasFocus = true;\n  }\n  /**\n   * Called when the focus leaves an element in the listbox.\n   * @param event The focusout event\n   */\n  _handleFocusOut(event) {\n    // Some browsers (e.g. Chrome and Firefox) trigger the focusout event when the user returns back to the document.\n    // To prevent losing the active option in this case, we store it in `_previousActiveOption` and restore it on the window `blur` event\n    // This ensures that the `activeItem` matches the actual focused element when the user returns to the document.\n    this._previousActiveOption = this.listKeyManager.activeItem;\n    const otherElement = event.relatedTarget;\n    if (this.element !== otherElement && !this.element.contains(otherElement)) {\n      this._onTouched();\n      this._hasFocus = false;\n      this._setNextFocusToSelectedOption();\n    }\n  }\n  /** Get the id of the active option if active descendant is being used. */\n  _getAriaActiveDescendant() {\n    return this.useActiveDescendant ? this.listKeyManager?.activeItem?.id : null;\n  }\n  /** Get the tabindex for the listbox. */\n  _getTabIndex() {\n    if (this.disabled) {\n      return -1;\n    }\n    return this.useActiveDescendant || !this.listKeyManager.activeItem ? this.enabledTabIndex : -1;\n  }\n  /** Initialize the key manager. */\n  _initKeyManager() {\n    this.listKeyManager = new ActiveDescendantKeyManager(this.options).withWrap(!this._navigationWrapDisabled).withTypeAhead().withHomeAndEnd().withAllowedModifierKeys(['shiftKey']).skipPredicate(this._navigateDisabledOptions ? this._skipNonePredicate : this._skipDisabledPredicate);\n    if (this.orientation === 'vertical') {\n      this.listKeyManager.withVerticalOrientation();\n    } else {\n      this.listKeyManager.withHorizontalOrientation(this._dir?.value || 'ltr');\n    }\n    if (this.selectionModel.selected.length) {\n      Promise.resolve().then(() => this._setNextFocusToSelectedOption());\n    }\n    this.listKeyManager.change.subscribe(() => this._focusActiveOption());\n    this.options.changes.pipe(takeUntil(this.destroyed)).subscribe(() => {\n      const activeOption = this.listKeyManager.activeItem;\n      // If the active option was deleted, we need to reset\n      // the key manager so it can allow focus back in.\n      if (activeOption && !this.options.find(option => option === activeOption)) {\n        this.listKeyManager.setActiveItem(-1);\n        this.changeDetectorRef.markForCheck();\n      }\n    });\n  }\n  /** Focus the active option. */\n  _focusActiveOption() {\n    if (!this.useActiveDescendant) {\n      this.listKeyManager.activeItem?.focus();\n    }\n    this.changeDetectorRef.markForCheck();\n  }\n  /**\n   * Set the selected values.\n   * @param value The list of new selected values.\n   */\n  _setSelection(value) {\n    if (this._invalid) {\n      this.selectionModel.clear(false);\n    }\n    this.selectionModel.setSelection(...this._coerceValue(value));\n    if (!this._hasFocus) {\n      this._setNextFocusToSelectedOption();\n    }\n  }\n  /** Sets the first selected option as first in the keyboard focus order. */\n  _setNextFocusToSelectedOption() {\n    // Null check the options since they only get defined after `ngAfterContentInit`.\n    const selected = this.options?.find(option => option.isSelected());\n    if (selected) {\n      this.listKeyManager.updateActiveItem(selected);\n    }\n  }\n  /** Update the internal value of the listbox based on the selection model. */\n  _updateInternalValue() {\n    const indexCache = new Map();\n    this.selectionModel.sort((a, b) => {\n      const aIndex = this._getIndexForValue(indexCache, a);\n      const bIndex = this._getIndexForValue(indexCache, b);\n      return aIndex - bIndex;\n    });\n    const selected = this.selectionModel.selected;\n    this._invalid = !this.multiple && selected.length > 1 || !!this._getInvalidOptionValues(selected).length;\n    this.changeDetectorRef.markForCheck();\n  }\n  /**\n   * Gets the index of the given value in the given list of options.\n   * @param cache The cache of indices found so far\n   * @param value The value to find\n   * @return The index of the value in the options list\n   */\n  _getIndexForValue(cache, value) {\n    const isEqual = this.compareWith || Object.is;\n    if (!cache.has(value)) {\n      let index = -1;\n      for (let i = 0; i < this.options.length; i++) {\n        if (isEqual(value, this.options.get(i).value)) {\n          index = i;\n          break;\n        }\n      }\n      cache.set(value, index);\n    }\n    return cache.get(value);\n  }\n  /**\n   * Handle the user clicking an option.\n   * @param option The option that was clicked.\n   */\n  _handleOptionClicked(option, event) {\n    event.preventDefault();\n    this.listKeyManager.setActiveItem(option);\n    if (event.shiftKey && this.multiple) {\n      this.triggerRange(option, this._getLastTriggeredIndex() ?? this.listKeyManager.activeItemIndex, this.listKeyManager.activeItemIndex, !option.isSelected());\n    } else {\n      this.triggerOption(option);\n    }\n  }\n  /** Verifies that no two options represent the same value under the compareWith function. */\n  _verifyNoOptionValueCollisions() {\n    this.options.changes.pipe(startWith(this.options), takeUntil(this.destroyed)).subscribe(() => {\n      const isEqual = this.compareWith ?? Object.is;\n      for (let i = 0; i < this.options.length; i++) {\n        const option = this.options.get(i);\n        let duplicate = null;\n        for (let j = i + 1; j < this.options.length; j++) {\n          const other = this.options.get(j);\n          if (isEqual(option.value, other.value)) {\n            duplicate = other;\n            break;\n          }\n        }\n        if (duplicate) {\n          // TODO(mmalerba): Link to docs about this.\n          if (this.compareWith) {\n            console.warn(`Found multiple CdkOption representing the same value under the given compareWith function`, {\n              option1: option.element,\n              option2: duplicate.element,\n              compareWith: this.compareWith\n            });\n          } else {\n            console.warn(`Found multiple CdkOption with the same value`, {\n              option1: option.element,\n              option2: duplicate.element\n            });\n          }\n          return;\n        }\n      }\n    });\n  }\n  /** Verifies that the option values are valid. */\n  _verifyOptionValues() {\n    if (this.options && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      const selected = this.selectionModel.selected;\n      const invalidValues = this._getInvalidOptionValues(selected);\n      if (!this.multiple && selected.length > 1) {\n        throw Error('Listbox cannot have more than one selected value in multi-selection mode.');\n      }\n      if (invalidValues.length) {\n        throw Error('Listbox has selected values that do not match any of its options.');\n      }\n    }\n  }\n  /**\n   * Coerces a value into an array representing a listbox selection.\n   * @param value The value to coerce\n   * @return An array\n   */\n  _coerceValue(value) {\n    return value == null ? [] : coerceArray(value);\n  }\n  /**\n   * Get the sublist of values that do not represent valid option values in this listbox.\n   * @param values The list of values\n   * @return The sublist of values that are not valid option values\n   */\n  _getInvalidOptionValues(values) {\n    const isEqual = this.compareWith || Object.is;\n    const validValues = (this.options || []).map(option => option.value);\n    return values.filter(value => !validValues.some(validValue => isEqual(value, validValue)));\n  }\n  /** Get the index of the last triggered option. */\n  _getLastTriggeredIndex() {\n    const index = this.options.toArray().indexOf(this._lastTriggered);\n    return index === -1 ? null : index;\n  }\n  /**\n   * Set previous active option as active option on window blur.\n   * This ensures that the `activeOption` matches the actual focused element when the user returns to the document.\n   */\n  _setPreviousActiveOptionAsActiveOptionOnWindowBlur() {\n    this.ngZone.runOutsideAngular(() => {\n      fromEvent(window, 'blur').pipe(takeUntil(this.destroyed)).subscribe(() => {\n        if (this.element.contains(document.activeElement) && this._previousActiveOption) {\n          this._setActiveOption(this._previousActiveOption);\n          this._previousActiveOption = null;\n        }\n      });\n    });\n  }\n  static {\n    this.ɵfac = function CdkListbox_Factory(t) {\n      return new (t || CdkListbox)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkListbox,\n      selectors: [[\"\", \"cdkListbox\", \"\"]],\n      contentQueries: function CdkListbox_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, CdkOption, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n        }\n      },\n      hostAttrs: [\"role\", \"listbox\", 1, \"cdk-listbox\"],\n      hostVars: 6,\n      hostBindings: function CdkListbox_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focus\", function CdkListbox_focus_HostBindingHandler() {\n            return ctx._handleFocus();\n          })(\"keydown\", function CdkListbox_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          })(\"focusout\", function CdkListbox_focusout_HostBindingHandler($event) {\n            return ctx._handleFocusOut($event);\n          })(\"focusin\", function CdkListbox_focusin_HostBindingHandler() {\n            return ctx._handleFocusIn();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id);\n          i0.ɵɵattribute(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled)(\"aria-multiselectable\", ctx.multiple)(\"aria-activedescendant\", ctx._getAriaActiveDescendant())(\"aria-orientation\", ctx.orientation);\n        }\n      },\n      inputs: {\n        id: \"id\",\n        enabledTabIndex: [i0.ɵɵInputFlags.None, \"tabindex\", \"enabledTabIndex\"],\n        value: [i0.ɵɵInputFlags.None, \"cdkListboxValue\", \"value\"],\n        multiple: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkListboxMultiple\", \"multiple\", booleanAttribute],\n        disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkListboxDisabled\", \"disabled\", booleanAttribute],\n        useActiveDescendant: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkListboxUseActiveDescendant\", \"useActiveDescendant\", booleanAttribute],\n        orientation: [i0.ɵɵInputFlags.None, \"cdkListboxOrientation\", \"orientation\"],\n        compareWith: [i0.ɵɵInputFlags.None, \"cdkListboxCompareWith\", \"compareWith\"],\n        navigationWrapDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkListboxNavigationWrapDisabled\", \"navigationWrapDisabled\", booleanAttribute],\n        navigateDisabledOptions: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkListboxNavigatesDisabledOptions\", \"navigateDisabledOptions\", booleanAttribute]\n      },\n      outputs: {\n        valueChange: \"cdkListboxValueChange\"\n      },\n      exportAs: [\"cdkListbox\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CdkListbox),\n        multi: true\n      }]), i0.ɵɵInputTransformsFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkListbox, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkListbox]',\n      standalone: true,\n      exportAs: 'cdkListbox',\n      host: {\n        'role': 'listbox',\n        'class': 'cdk-listbox',\n        '[id]': 'id',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[attr.aria-orientation]': 'orientation',\n        '(focus)': '_handleFocus()',\n        '(keydown)': '_handleKeydown($event)',\n        '(focusout)': '_handleFocusOut($event)',\n        '(focusin)': '_handleFocusIn()'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CdkListbox),\n        multi: true\n      }]\n    }]\n  }], () => [], {\n    id: [{\n      type: Input\n    }],\n    enabledTabIndex: [{\n      type: Input,\n      args: ['tabindex']\n    }],\n    value: [{\n      type: Input,\n      args: ['cdkListboxValue']\n    }],\n    multiple: [{\n      type: Input,\n      args: [{\n        alias: 'cdkListboxMultiple',\n        transform: booleanAttribute\n      }]\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        alias: 'cdkListboxDisabled',\n        transform: booleanAttribute\n      }]\n    }],\n    useActiveDescendant: [{\n      type: Input,\n      args: [{\n        alias: 'cdkListboxUseActiveDescendant',\n        transform: booleanAttribute\n      }]\n    }],\n    orientation: [{\n      type: Input,\n      args: ['cdkListboxOrientation']\n    }],\n    compareWith: [{\n      type: Input,\n      args: ['cdkListboxCompareWith']\n    }],\n    navigationWrapDisabled: [{\n      type: Input,\n      args: [{\n        alias: 'cdkListboxNavigationWrapDisabled',\n        transform: booleanAttribute\n      }]\n    }],\n    navigateDisabledOptions: [{\n      type: Input,\n      args: [{\n        alias: 'cdkListboxNavigatesDisabledOptions',\n        transform: booleanAttribute\n      }]\n    }],\n    valueChange: [{\n      type: Output,\n      args: ['cdkListboxValueChange']\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [CdkOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\nconst EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\nclass CdkListboxModule {\n  static {\n    this.ɵfac = function CdkListboxModule_Factory(t) {\n      return new (t || CdkListboxModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: CdkListboxModule,\n      imports: [CdkListbox, CdkOption],\n      exports: [CdkListbox, CdkOption]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkListboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [...EXPORTED_DECLARATIONS],\n      exports: [...EXPORTED_DECLARATIONS]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkListbox, CdkListboxModule, CdkOption };\n"],
  "mappings": "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",
  "names": []
}
